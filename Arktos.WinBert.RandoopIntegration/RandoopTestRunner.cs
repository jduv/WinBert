namespace Arktos.WinBert.RandoopIntegration
{
    using System;
    using System.Reflection;
    using Arktos.WinBert.Testing;

    /// <summary>
    /// Manages and executes a suite of tests generated by a RandoopTestGenerator.
    /// </summary>
    public class RandoopTestRunner : IRegressionTestSuiteRunner
    {
        #region Constants & Fields

        /// <summary>
        ///   The name of the method to execute in each test type. Randoop generates them as Main.
        /// </summary>
        private const string TestMethodName = @"Main";

        #endregion

        #region Public Methods

        /////// <summary>
        /////// Runs all tests in the target test suite.
        /////// </summary>
        /////// <param name="tests">
        /////// The test suite of which to run the tests from.
        /////// </param>
        /////// <returns>
        /////// A TestRunResult object indicating the results of the test run.
        /////// </returns>
        ////public RegressionTestSuiteRunResult RunTests(IRegressionTestSuite tests)
        ////{
        ////    this.ExecuteAllTestsInAssembly(tests.OldTargetTestAssembly);

        ////    return null;
        ////}

        #endregion

        #region Private Methods

        /// <summary>
        /// Invokes all tests in the target test assembly.
        /// </summary>
        /// <param name="testAssembly">
        /// The test assembly from which to invoke all the tests from.
        /// </param>
        private void ExecuteAllTestsInAssembly(Assembly testAssembly)
        {
            foreach (Type t in testAssembly.GetTypes())
            {
                var method = t.GetMethod(TestMethodName);
                if (method != null)
                {
                    var target = AppDomain.CurrentDomain.CreateInstanceFromAndUnwrap(
                        testAssembly.Location, 
                        t.FullName);

                    method.Invoke(target, null);
                }
            }
        }

        #endregion
    }
}