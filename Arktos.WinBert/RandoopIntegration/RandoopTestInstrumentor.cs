namespace Arktos.WinBert.RandoopIntegration
{
    using AppDomainToolkit;
    using Arktos.WinBert.Instrumentation;
    using Arktos.WinBert.Testing;
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Instruments a test assembly that was generated by Randoop.
    /// </summary>
    public class RandoopTestInstrumentor : ITestInstrumentor
    {
        #region

        private readonly string testMethodName;

        #endregion

        #region Constructors & Destructors

        public RandoopTestInstrumentor(string testMethodName)
        {
            if (string.IsNullOrWhiteSpace(testMethodName))
            {
                throw new ArgumentException("Test method name cannot be null or white space!");
            }

            this.testMethodName = testMethodName;
        }

        #endregion

        #region Public Methods

        /// <inheritdoc/>
        public ITestTarget InstrumentTests(ITestTarget toInstrument)
        {
            IAssemblyTarget instrumentedTests = null, instrOldAssembly = null, instrNewAssembly = null;

            // Do all the instrumenting in parallel.
            Parallel.Invoke(
                () =>
                {
                    instrumentedTests = this.InstrumentTestAssembly(toInstrument.TestAssembly);
                },
                () =>
                {
                    instrOldAssembly = this.InstrumentTarget(toInstrument.TargetOldAssembly);
                },
                () =>
                {
                    instrNewAssembly = this.InstrumentTarget(toInstrument.TargetNewAssembly);
                });

            return TestTarget.Create(instrOldAssembly, instrNewAssembly, instrumentedTests);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Instruments the test assembly.
        /// </summary>
        /// <param name="toInstrument">
        /// The assembly to instrument.
        /// </param>
        /// <returns>
        /// A target to the new tests.
        /// </returns>
        private IAssemblyTarget InstrumentTestAssembly(IAssemblyTarget toInstrument)
        {
            using (var testTarget = InstrumentationTarget.Create(toInstrument))
            {
                var rewriter = new RandoopTestRewriter(testMethodName, testTarget.Host);
                return rewriter.Rewrite(testTarget);
            }
        }

        /// <summary>
        /// Instyruments the target assembly. Simply adds probes to infer a dynamic call graph during
        /// execution.
        /// </summary>
        /// <param name="toInstrument">
        /// The assembly to instrument.
        /// </param>
        /// <returns>
        /// A target to the new assembly.
        /// </returns>
        private IAssemblyTarget InstrumentTarget(IAssemblyTarget toInstrument)
        {
            using (var target = InstrumentationTarget.Create(toInstrument))
            {
                var rewriter = new DynamicCallGraphInjector(target.Host);
                return rewriter.Rewrite(target);
            }
        }

        #endregion
    }
}
