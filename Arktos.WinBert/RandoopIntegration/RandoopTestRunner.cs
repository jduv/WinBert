namespace Arktos.WinBert.RandoopIntegration
{
    using System;
    using System.Linq;
    using AppDomainToolkit;
    using Arktos.WinBert.Testing;
    using Arktos.WinBert.Instrumentation;
    using System.IO;
    using System.Reflection;

    /// <summary>
    /// Executes a suite of tests generated by Randoop.
    /// </summary>
    public class RandoopTestRunner : ITestRunner
    {
        #region Fields & Constants

        private readonly string testMethodName;

        #endregion

        #region Constructors & Destructors

        public RandoopTestRunner(string testMethodName)
        {
            if (string.IsNullOrWhiteSpace(testMethodName))
            {
                throw new ArgumentException("Test method name cannot be null or whitespace!");
            }

            this.testMethodName = testMethodName;
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        public ITestRunResult RunTests(IAssemblyTarget target, IAssemblyTarget tests)
        {
            var loader = new AssemblyLoader();
            var testAssembly = loader.LoadAssembly(LoadMethod.LoadFile, tests.Location);
            foreach (var type in testAssembly.GetTypes())
            {
                var testObj = Activator.CreateInstance(type);
                var method = type.GetMethods().First(x => x.Name.Equals(this.testMethodName));
                method.Invoke(testObj, null);
            }

            // Execute Save by finding the loaded winbert assembly and calling TestUtil.SaveResults()
            TestRunResult result;
            var analysisLogPath = CreateAnalysisFilePath(target);
            var winbert = loader.GetAssemblies().FirstOrDefault(x => x.FullName.Equals(Assembly.GetExecutingAssembly().FullName));
            var testUtil = winbert == null ? null : winbert.GetTypes().FirstOrDefault(x => x.Name.Equals(typeof(TestUtil).Name));

            if (testUtil != null)
            {
                var method = testUtil.GetMethods().First(x => x.Name.Equals(TestUtilMethodInjector.SaveResultsName));
                method.Invoke(testUtil, new object[] { analysisLogPath });
                result = TestRunResult.Successful(analysisLogPath);
            }
            else
            {
                result = TestRunResult.Failure();
            }

            return result;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Creates a file path for the analysis file from the assembly target.
        /// </summary>
        /// <param name="target">
        /// The assembly target to create the analysis file path for.
        /// </param>
        /// <returns>
        /// A string path to an XML file that should contain analysis information.
        /// </returns>
        private static string CreateAnalysisFilePath(IAssemblyTarget target)
        {
            var uniqueId = Guid.NewGuid().ToString().Substring(0, 6);
            var analysisFileName = Path.GetFileName(target.Location);
            var extension = Path.GetExtension(analysisFileName);
            analysisFileName = Path.ChangeExtension(analysisFileName, extension + "." + uniqueId + ".analysis.xml");
            return Path.Combine(Path.GetDirectoryName(target.Location), analysisFileName);
        }

        #endregion
    }
}