<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="WinBertAnalysisLog"
    targetNamespace="http://arktos.org/WinBertAnalysisLogSchema.xsd"
    elementFormDefault="qualified"
    xmlns="http://arktos.org/WinBertAnalysisLogSchema.xsd"
    xmlns:ba="http://arktos.org/WinBertAnalysisLogSchema.xsd"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
>

  <xs:complexType name="TestExecution">
    <xs:annotation>
      <xs:documentation>
        Represents the execution of a test case generated by another system. This test case should have zero or more method
        calls associated with it along with a dynamic call graph corresponding to each method execution.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="MethodCalls">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="MethodCall" type="ba:MethodCall" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:unsignedInt" use="required"/>
  </xs:complexType>

  <xs:complexType name="MethodCall">
    <xs:annotation>
      <xs:documentation>
        Defines an element that is used to represent a method call site. This call site can be static, isntance or constructor.
        If the method call type is instance, then the &gt;PostCallInstance&lt; element should contain a dump of the object the method
        was executed on <i>post</i> call.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Signature" type="xs:string" />
      <xs:element name="DynamicCallGraph" type="ba:DynamicCallGraph" />
      <xs:element name="PostCallInstance" type="ba:Object" />
      <xs:element name="ReturnValue" type="ba:Value" minOccurs="0" />
    </xs:sequence>
    <xs:attribute name="Id" type="xs:unsignedInt" use="required"/>
    <xs:attribute name="Type" type="ba:MethodCallType" use="required" />
  </xs:complexType>

  <xs:simpleType name="MethodCallType">
    <xs:annotation>
      <xs:documentation>
        An enumeration representing method call types.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Instance" />
      <xs:enumeration value="Static" />
      <xs:enumeration value="Ctor" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="Field">
    <xs:annotation>
      <xs:documentation>
        Represents a field on a reference or value type.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Value" type="ba:Value" />
    </xs:sequence>
    <xs:attribute name="Name" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="Property">
    <xs:annotation>
      <xs:documentation>
        Represents a property on a reference or value type.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Value" type="ba:Value" />
    </xs:sequence>
    <xs:attribute name="Name" type="xs:string" use="required" />
    <xs:attribute name="BackingFieldName" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="Value">
    <xs:annotation>
      <xs:documentation>
        This basic type represents a container for an object or a primitive. This will primarily be used when
        representing the actual raw data inside fields or structs--which can be either nested objects or
        primitive types.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:choice>
        <xs:element name="Object" type="ba:Object" />
        <xs:element name="Primitive" type="ba:Primitive" />
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="Object">
    <xs:annotation>
      <xs:documentation>
        Represents an object. This base type allows a basic roll up of some other representations. It serves as a base
        for all reference and value types.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Fields" type="ba:Field" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="Properties" type="ba:Property" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
    <xs:attribute name="Type" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="Primitive">
    <xs:annotation>
      <xs:documentation>
        Represents a primitive type, such as int or long.
      </xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="Type" type="xs:string" use="required" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="Null">
    <xs:annotation>
      <xs:documentation>
        Represents a null object.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ba:Object" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NotNull">
    <xs:annotation>
      <xs:documentation>
        Represents a non-null object. Expect this when the maximum depth of the object dumping algorithm
        has been reached.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ba:Object"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="This">
    <xs:annotation>
      <xs:documentation>
        Represents a pointer to the current object. This is relevant mainly to just fields that point back to the
        enclosing object, and is useful for preventing uneeded recursion during object logging. A field with
        this value should be considered to have the exact same value as it's direct parent object.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ba:Object"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DynamicCallGraph">
    <xs:annotation>
      <xs:documentation>
        Represents a list of called methods. This is a flat list of A -> B call graph nodes. It is stored this way 
        in order to keep the XML nice and clean. It should be parsed into a tree in analysis code--which should
        be trivial to do.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="CallGraphNode" type="ba:CallGraphNode" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  
  <xs:complexType name="CallGraphNode">
    <xs:annotation>
      <xs:documentation>
        Represents a call graph node. The sequence number places a topological ordering on the nodes with respect
        to which method called which. This can be used to construct a real tree-like call graph quite easily.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Signature" type="xs:string" />
    </xs:sequence>
    <xs:attribute name="SequenceNumber" type="xs:unsignedInt" use="required"/>
  </xs:complexType>

  <xs:complexType name="WinBertAnalysisLog">
    <xs:annotation>
      <xs:documentation>
        A log of method calls.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="TestExecutions">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="TestExecution" type="ba:TestExecution" minOccurs="0" maxOccurs="unbounded" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="WinBertAnalysisLog" type="ba:WinBertAnalysisLog"></xs:element>
</xs:schema>
