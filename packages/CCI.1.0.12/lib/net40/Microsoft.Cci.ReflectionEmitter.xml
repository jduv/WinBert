<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.ReflectionEmitter</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Cci.ReflectionEmitter.DynamicLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.#ctor(Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.ILocalScopeProvider)">
            <summary>
            
            </summary>
            <param name="sourceLocationProvider"></param>
            <param name="localScopeProvider"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Load(Microsoft.Cci.IAssembly)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Load(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            
            </summary>
            <param name="namespaceTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Load(Microsoft.Cci.IMethodDefinition,System.Boolean)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="skipVisibility"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.ReflectionEmitter.DynamicLoader.ModuleBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.MemberBuilderAllocator.TraverseChildren(Microsoft.Cci.IEventDefinition)">
            <summary>
            
            </summary>
            <param name="eventDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.MemberBuilderAllocator.TraverseChildren(Microsoft.Cci.IFieldDefinition)">
            <summary>
            
            </summary>
            <param name="fieldDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.MemberBuilderAllocator.TraverseChildren(Microsoft.Cci.IGenericParameter)">
            <summary>
            
            </summary>
            <param name="genericParameter"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.MemberBuilderAllocator.TraverseChildren(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            
            </summary>
            <param name="propertyDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.MemberBuilderAllocator.TraverseChildren(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Traverses the children of the method definition.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IEventDefinition)">
            <summary>
            Performs some computation with the given event definition.
            </summary>
            <param name="eventDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IMetadataConstant)">
            <summary>
            Performs some computation with the given metadata constant.
            </summary>
            <param name="constant"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IMetadataCreateArray)">
            <summary>
            Performs some computation with the given metadata array creation expression.
            </summary>
            <param name="createArray"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IMetadataTypeOf)">
            <summary>
            Performs some computation with the given metadata typeof expression.
            </summary>
            <param name="typeOf"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Performs some computation with the given field definition.
            </summary>
            <param name="fieldDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Performs some computation with the given method definition.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IGenericParameter)">
            <summary>
            Performs some computation with the given generic parameter.
            </summary>
            <param name="genericParameter"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.IPropertyDefinition)">
            <summary>
            Performs some computation with the given property definition.
            </summary>
            <param name="propertyDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Performs some computation with the given namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.Emitter.Visit(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Performs some computation with the given nested type definition.
            </summary>
            <param name="nestedTypeDefinition"></param>
        </member>
        <member name="T:Microsoft.Cci.ReflectionEmitter.DynamicLoader.TypeCreator">
            <summary>
            If given a type definition that has an uncreated type builder associated with it, 
            this traverser first attempts to create all types referenced by the type in its base
            class and interfaces, then it creates the type. This does not work when there are
            cyclic dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.TypeCreator.TraverseChildren(Microsoft.Cci.INamespaceTypeDefinition)">
            <summary>
            Traverses the children of the namespace type definition.
            </summary>
            <param name="namespaceTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.TypeCreator.TraverseChildren(Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Traverses the children of the namespace type reference.
            </summary>
            <param name="namespaceTypeReference"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.TypeCreator.TraverseChildren(Microsoft.Cci.INestedTypeDefinition)">
            <summary>
            Traverses the children of the nested type definition.
            </summary>
            <param name="nestedTypeDefinition"></param>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.DynamicLoader.TypeCreator.TraverseChildren(Microsoft.Cci.INestedTypeReference)">
            <summary>
            Traverses the children of the nested type reference.
            </summary>
            <param name="nestedTypeReference"></param>
        </member>
        <member name="T:Microsoft.Cci.ReflectionEmitter.ReflectionMapper">
            <summary>
            An object that provides methods to map CCI metadata references to corresponding System.Type and System.Reflection.* objects.
            The object maintains a cache of mappings and should typically be used for doing many mappings.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.ReflectionMapper.#ctor">
            <summary>
            An object that provides methods to map CCI metadata references to corresponding System.Type and System.Reflection.* objects.
            The object maintains a cache of mappings and should typically be used for doing many mappings.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.ReflectionMapper.GetAssembly(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Returns a "live" System.Reflection.Assembly instance that provides reflective access to the referenced assembly. 
            If the assembly cannot be found or cannot be loaded, the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.ReflectionMapper.GetModule(Microsoft.Cci.IModuleReference)">
            <summary>
            Returns a "live" System.Reflection.Module instance that provides reflective access to the referenced module.
            If the module cannot be found or cannot be loaded, the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.ReflectionMapper.GetField(Microsoft.Cci.IFieldReference)">
            <summary>
            Returns a "live" System.Reflection.FieldInfo object that provides reflective access to the referenced field.
            If the field cannot be found or cannot be loaded, the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.ReflectionMapper.GetMethod(Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a "live" System.Reflection.MethodBase object that provides reflective access to the referenced method.
            If the method cannot be found or cannot be loaded, the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ReflectionEmitter.ReflectionMapper.GetType(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a "live" System.Type object that provides reflective access to the referenced typeBuilder.
            If the typeBuilder cannot be found or cannot be loaded, the result is null.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ReflectionEmitter.MappingVisitorForTypes">
            <summary>
            A visitor that maps CCI typeBuilder references to System.Type instances using method on System.Type.
            It uses a provided ReflectionMapper object to map element types to System.Type instances so
            that the caches maintained by ReflectionMapper can be used.
            </summary>
        </member>
    </members>
</doc>
